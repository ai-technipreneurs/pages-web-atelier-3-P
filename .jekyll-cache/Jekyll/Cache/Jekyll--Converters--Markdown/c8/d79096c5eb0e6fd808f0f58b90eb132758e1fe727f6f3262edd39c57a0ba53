I"Q;<p><a href="../Contents.html">Contents</a> | <a href="02_Hello_world.html">Previous (1.2 A First Program)</a> | <a href="04_Strings.html">Next (1.4 Strings)</a></p>

<h1 id="13-numbers">1.3 Numbers</h1>

<p>This section discusses mathematical calculations.</p>

<h3 id="types-of-numbers">Types of Numbers</h3>

<p>Python has 4 types of numbers:</p>

<ul>
  <li>Booleans</li>
  <li>Integers</li>
  <li>Floating point</li>
  <li>Complex (imaginary numbers)</li>
</ul>

<h3 id="booleans-bool">Booleans (bool)</h3>

<p>Booleans have two values: <code class="language-plaintext highlighter-rouge">True</code>, <code class="language-plaintext highlighter-rouge">False</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">b</span> <span class="o">=</span> <span class="bp">False</span>
</code></pre></div></div>

<p>Numerically, they’re evaluated as integers with value <code class="language-plaintext highlighter-rouge">1</code>, <code class="language-plaintext highlighter-rouge">0</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">c</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">+</span> <span class="bp">True</span> <span class="c1"># 5
</span><span class="n">d</span> <span class="o">=</span> <span class="bp">False</span>
<span class="k">if</span> <span class="n">d</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'d is False'</span><span class="p">)</span>
</code></pre></div></div>

<p><em>But, don’t write code like that. It would be odd.</em></p>

<h3 id="integers-int">Integers (int)</h3>

<p>Signed values of arbitrary size and base:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">37</span>
<span class="n">b</span> <span class="o">=</span> <span class="o">-</span><span class="mi">299392993727716627377128481812241231</span>
<span class="n">c</span> <span class="o">=</span> <span class="mh">0x7fa8</span>      <span class="c1"># Hexadecimal
</span><span class="n">d</span> <span class="o">=</span> <span class="mo">0o253</span>       <span class="c1"># Octal
</span><span class="n">e</span> <span class="o">=</span> <span class="mb">0b10001111</span>  <span class="c1"># Binary
</span></code></pre></div></div>

<p>Common operations:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x + y      Add
x - y      Subtract
x * y      Multiply
x / y      Divide (produces a float)
x // y     Floor Divide (produces an integer)
x % y      Modulo (remainder)
x ** y     Power
x &lt;&lt; n     Bit shift left
x &gt;&gt; n     Bit shift right
x &amp; y      Bit-wise AND
x | y      Bit-wise OR
x ^ y      Bit-wise XOR
~x         Bit-wise NOT
abs(x)     Absolute value
</code></pre></div></div>

<h3 id="floating-point-float">Floating point (float)</h3>

<p>Use a decimal or exponential notation to specify a floating point value:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mf">37.45</span>
<span class="n">b</span> <span class="o">=</span> <span class="mf">4e5</span> <span class="c1"># 4 x 10**5 or 400,000
</span><span class="n">c</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.345e-10</span>
</code></pre></div></div>

<p>Floats are represented as double precision using the native CPU representation <a href="https://en.wikipedia.org/wiki/IEEE_754">IEEE 754</a>.
This is the same as the <code class="language-plaintext highlighter-rouge">double</code> type in the programming language C.</p>

<blockquote>
  <p>17 digits of precision<br />
Exponent from -308 to 308</p>
</blockquote>

<p>Be aware that floating point numbers are inexact when representing decimals.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="mf">2.1</span> <span class="o">+</span> <span class="mf">4.2</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">==</span> <span class="mf">6.3</span>
<span class="bp">False</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">a</span>
<span class="mf">6.300000000000001</span>
<span class="o">&gt;&gt;&gt;</span>
</code></pre></div></div>

<p>This is <strong>not a Python issue</strong>, but the underlying floating point hardware on the CPU.</p>

<p>Common Operations:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x + y      Add
x - y      Subtract
x * y      Multiply
x / y      Divide
x // y     Floor Divide
x % y      Modulo
x ** y     Power
abs(x)     Absolute Value
</code></pre></div></div>

<p>These are the same operators as Integers, except for the bit-wise operators.
Additional math functions are found in the <code class="language-plaintext highlighter-rouge">math</code> module.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">math</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="n">cos</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="n">tan</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="n">e</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="comparisons">Comparisons</h3>

<p>The following comparison / relational operators work with numbers:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x &lt; y      Less than
x &lt;= y     Less than or equal
x &gt; y      Greater than
x &gt;= y     Greater than or equal
x == y     Equal to
x != y     Not equal to
</code></pre></div></div>

<p>You can form more complex boolean expressions using</p>

<p><code class="language-plaintext highlighter-rouge">and</code>, <code class="language-plaintext highlighter-rouge">or</code>, <code class="language-plaintext highlighter-rouge">not</code></p>

<p>Here are a few examples:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">b</span> <span class="o">&gt;=</span> <span class="n">a</span> <span class="ow">and</span> <span class="n">b</span> <span class="o">&lt;=</span> <span class="n">c</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'b is between a and c'</span><span class="p">)</span>

<span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="n">b</span> <span class="o">&lt;</span> <span class="n">a</span> <span class="ow">or</span> <span class="n">b</span> <span class="o">&gt;</span> <span class="n">c</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'b is still between a and c'</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="converting-numbers">Converting Numbers</h3>

<p>The type name can be used to convert values:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>    <span class="c1"># Convert x to integer
</span><span class="n">b</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>  <span class="c1"># Convert x to float
</span></code></pre></div></div>

<p>Try it out.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="mf">3.14159</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">int</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="s">'3.14159'</span> <span class="c1"># It also works with strings containing numbers
</span><span class="o">&gt;&gt;&gt;</span> <span class="nb">float</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
<span class="mf">3.14159</span>
<span class="o">&gt;&gt;&gt;</span>
</code></pre></div></div>

<h2 id="exercises">Exercises</h2>

<p>Reminder: These exercises assume you are working in the <code class="language-plaintext highlighter-rouge">practical-python/Work</code> directory. Look
for the file <code class="language-plaintext highlighter-rouge">mortgage.py</code>.</p>

<h3 id="exercise-17-daves-mortgage">Exercise 1.7: Dave’s mortgage</h3>

<p>Dave has decided to take out a 30-year fixed rate mortgage of $500,000
with Guido’s Mortgage, Stock Investment, and Bitcoin trading
corporation.  The interest rate is 5% and the monthly payment is
$2684.11.</p>

<p>Here is a program that calculates the total amount that Dave will have
to pay over the life of the mortgage:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># mortgage.py
</span>
<span class="n">principal</span> <span class="o">=</span> <span class="mf">500000.0</span>
<span class="n">rate</span> <span class="o">=</span> <span class="mf">0.05</span>
<span class="n">payment</span> <span class="o">=</span> <span class="mf">2684.11</span>
<span class="n">total_paid</span> <span class="o">=</span> <span class="mf">0.0</span>

<span class="k">while</span> <span class="n">principal</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">principal</span> <span class="o">=</span> <span class="n">principal</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">rate</span><span class="o">/</span><span class="mi">12</span><span class="p">)</span> <span class="o">-</span> <span class="n">payment</span>
    <span class="n">total_paid</span> <span class="o">=</span> <span class="n">total_paid</span> <span class="o">+</span> <span class="n">payment</span>

<span class="k">print</span><span class="p">(</span><span class="s">'Total paid'</span><span class="p">,</span> <span class="n">total_paid</span><span class="p">)</span>
</code></pre></div></div>

<p>Enter this program and run it. You should get an answer of <code class="language-plaintext highlighter-rouge">966,279.6</code>.</p>

<h3 id="exercise-18-extra-payments">Exercise 1.8: Extra payments</h3>

<p>Suppose Dave pays an extra $1000/month for the first 12 months of the mortgage?</p>

<p>Modify the program to incorporate this extra payment and have it print the total amount paid along with the number of months required.</p>

<p>When you run the new program, it should report a total payment of <code class="language-plaintext highlighter-rouge">929,965.62</code> over 342 months.</p>

<h3 id="exercise-19-making-an-extra-payment-calculator">Exercise 1.9: Making an Extra Payment Calculator</h3>

<p>Modify the program so that extra payment information can be more generally handled.
Make it so that the user can set these variables:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">extra_payment_start_month</span> <span class="o">=</span> <span class="mi">61</span>
<span class="n">extra_payment_end_month</span> <span class="o">=</span> <span class="mi">108</span>
<span class="n">extra_payment</span> <span class="o">=</span> <span class="mi">1000</span>
</code></pre></div></div>

<p>Make the program look at these variables and calculate the total paid appropriately.</p>

<p>How much will Dave pay if he pays an extra $1000/month for 4 years starting after the first
five years have already been paid?</p>

<h3 id="exercise-110-making-a-table">Exercise 1.10: Making a table</h3>

<p>Modify the program to print out a table showing the month, total paid so far, and the remaining principal.
The output should look something like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 2684.11 499399.22
2 5368.22 498795.94
3 8052.33 498190.15
4 10736.44 497581.83
5 13420.55 496970.98
...
308 874705.88 3478.83
309 877389.99 809.21
310 880074.1 <span class="nt">-1871</span>.53
Total paid 880074.1
Months 310
</code></pre></div></div>

<h3 id="exercise-111-bonus">Exercise 1.11: Bonus</h3>

<p>While you’re at it, fix the program to correct for the overpayment that occurs in the last month.</p>

<h3 id="exercise-112-a-mystery">Exercise 1.12: A Mystery</h3>

<p><code class="language-plaintext highlighter-rouge">int()</code> and <code class="language-plaintext highlighter-rouge">float()</code> can be used to convert numbers.  For example,</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nb">int</span><span class="p">(</span><span class="s">"123"</span><span class="p">)</span>
<span class="mi">123</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">float</span><span class="p">(</span><span class="s">"1.23"</span><span class="p">)</span>
<span class="mf">1.23</span>
<span class="o">&gt;&gt;&gt;</span>
</code></pre></div></div>

<p>With that in mind, can you explain this behavior?</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nb">bool</span><span class="p">(</span><span class="s">"False"</span><span class="p">)</span>
<span class="bp">True</span>
<span class="o">&gt;&gt;&gt;</span>
</code></pre></div></div>

<p><a href="../Contents.html">Contents</a> | <a href="02_Hello_world.html">Previous (1.2 A First Program)</a> | <a href="04_Strings.html">Next (1.4 Strings)</a></p>

:ET