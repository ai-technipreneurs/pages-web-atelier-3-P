I"∞Ñ<h1 id="vue-densemble">Vue d‚Äôensemble</h1>

<h2 id="variables-et-assignement">Variables et assignement</h2>

<p>Python est un langage dynamiquement typ√©, les variables n‚Äôont pas
besoin d‚Äô√™tre d√©clar√©es, et leur type peut changer au cours de
l‚Äôex√©cution.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python</span><span class="p">:</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">python</span><span class="p">:</span> <span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="o">&lt;</span><span class="nb">type</span> <span class="s">'int'</span><span class="o">&gt;</span>
<span class="n">python</span><span class="p">:</span> <span class="n">a</span> <span class="o">=</span> <span class="s">'3'</span>
<span class="n">python</span><span class="p">:</span> <span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="o">&lt;</span><span class="nb">type</span> <span class="s">'str'</span><span class="o">&gt;</span>
<span class="n">python</span><span class="p">:</span> <span class="n">a</span>
<span class="s">'3'</span>
<span class="n">python</span><span class="p">:</span> <span class="nb">int</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="mi">3</span>
</code></pre></div></div>

<h2 id="syntaxe">Syntaxe</h2>

<p>L‚Äôindentation en Python a une valeur syntaxique : elle sert √† d√©limter
les blocs. Toutes les lignes d‚Äôun m√™me bloc doivent √™tre pr√©c√©d√©es du
m√™me nombre d‚Äôespaces blancs ; en g√©n√©ral on conseille d‚Äôutiliser 4
espaces blancs.</p>

<p>Voici un exemple de bloc conditionnel mettant en √©vidence cette
syntaxe.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
    <span class="k">print</span> <span class="s">'a vaut 0'</span>
<span class="k">elif</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'a est positif'</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'il vaut : '</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'a est n√©gatif'</span><span class="p">)</span>
<span class="k">print</span> <span class="s">'encore des questions sur a?'</span>
</code></pre></div></div>

<h2 id="structures-de-contr√¥le">Structures de contr√¥le</h2>

<p>Source : <a href="https://docs.python.org/3.5/tutorial/controlflow.html">https://docs.python.org/3.5/tutorial/controlflow.html</a></p>

<h3 id="if-else"><code class="language-plaintext highlighter-rouge">if... else</code></h3>

<p>La seule construction conditionnelle existante en Python est
<code class="language-plaintext highlighter-rouge">if... elif... else...</code>. Toutes les branches sont optionnelles, √†
l‚Äôexception du <code class="language-plaintext highlighter-rouge">if</code>, il peut y avoir un nombre quelconque de <code class="language-plaintext highlighter-rouge">elif</code>,
mais un seul <code class="language-plaintext highlighter-rouge">else</code> √† la fin.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="n">b</span> <span class="o">==</span> <span class="n">c</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'√©gaux'</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">a</span> <span class="o">&lt;=</span> <span class="n">b</span> <span class="o">&lt;=</span> <span class="n">c</span>  <span class="ow">or</span>  <span class="n">c</span> <span class="o">&lt;=</span> <span class="n">b</span> <span class="o">&lt;=</span> <span class="n">a</span><span class="p">:</span>
    <span class="k">print</span> <span class="s">'b au milieu'</span>
<span class="k">elif</span> <span class="n">b</span> <span class="o">&lt;=</span> <span class="n">a</span> <span class="o">&lt;=</span> <span class="n">c</span>  <span class="ow">or</span>  <span class="n">c</span> <span class="o">&lt;=</span> <span class="n">a</span> <span class="o">&lt;=</span> <span class="n">b</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'a au milieu'</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'c au milieu'</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="boucle-for-in">Boucle <code class="language-plaintext highlighter-rouge">for... in</code></h3>

<p>Fondamentalement, il existe deux types de boucles en Python. La plus courante
est la <code class="language-plaintext highlighter-rouge">for... in</code> qui permet de parcourir les √©l√©ments d‚Äôun it√©rable.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="la-fonction-range">La fonction <code class="language-plaintext highlighter-rouge">range</code></h4>

<p>La boucle <code class="language-plaintext highlighter-rouge">for</code> est souvent utilis√©e en conjonction avec la fonction
<code class="language-plaintext highlighter-rouge">range</code>, dont la syntaxe g√©n√©rale est :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">range</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">step</span><span class="p">)</span>
</code></pre></div></div>

<p>Ainsi appel√©e, la fonction g√©n√®re la liste des entiers entre <code class="language-plaintext highlighter-rouge">start</code>
(inclus) et <code class="language-plaintext highlighter-rouge">end</code> (non inclus) avec pas de <code class="language-plaintext highlighter-rouge">step</code> :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python</span><span class="p">:</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>
</code></pre></div></div>

<p>Les deux autres syntaxes admissibles sont <code class="language-plaintext highlighter-rouge">range(start, end)</code> (pas
√©gal √† 1) et <code class="language-plaintext highlighter-rouge">range(end)</code> (d√©but √©gal √† 0).</p>

<p><strong>Note :</strong> √Ä partir de Python 3.x, <code class="language-plaintext highlighter-rouge">range</code> ne renvoie plus une liste,
 mais un <em>g√©n√©rateur</em>. La diff√©rence r√©side exclusivement dans
 l‚Äôutilisation de la m√©moire, beaucoup plus efficace avec la 3.x. Le
 m√™me comportement est r√©alis√© par la fonction <code class="language-plaintext highlighter-rouge">xrange</code> en Python 2.x.</p>

<h3 id="boucle-while">Boucle <code class="language-plaintext highlighter-rouge">while</code></h3>

<p>La deuxi√®me boucle est la <code class="language-plaintext highlighter-rouge">while</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>
    <span class="n">a</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</code></pre></div></div>

<p>Pas √©tonnant qu‚Äôil soit alors beaucoup plus facile d‚Äô√©crire une boucle
infinie :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'boucle toujours'</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="interrompre-les-boucles-break-continue-et-return">Interrompre les boucles: <code class="language-plaintext highlighter-rouge">break</code>, <code class="language-plaintext highlighter-rouge">continue</code> et <code class="language-plaintext highlighter-rouge">return</code></h3>

<p>L‚Äôinstruction <code class="language-plaintext highlighter-rouge">break</code> sort de la boucle sans v√©rifier la
condition :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">:</span>
        <span class="k">break</span>
</code></pre></div></div>

<p>L‚Äôinstruction <code class="language-plaintext highlighter-rouge">continue</code> passe √† l‚Äôit√©ration suivante en sautant le
reste du corps :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">continue</span>
    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div>

<p>Et le <code class="language-plaintext highlighter-rouge">return</code> sort imm√©diatement de toute boucle et de la fonction
qui le contient.</p>

<h2 id="listes">Listes</h2>

<p>Source : <a href="https://docs.python.org/3/tutorial/datastructures.html">https://docs.python.org/3/tutorial/datastructures.html</a></p>

<p>L‚Äôun des objets les plus utilis√©s en Python, ce sont les listes. On
d√©clare une liste avec les crochets <code class="language-plaintext highlighter-rouge">[]</code>, et on acc√®de √† ses √©l√©ments
comme on acc√®de aux √©l√©ments d‚Äôun tableau en C :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python</span><span class="p">:</span> <span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="s">'nom'</span><span class="p">,</span><span class="s">'prenom'</span><span class="p">,</span><span class="mi">35</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="bp">True</span><span class="p">]</span>
<span class="n">python</span><span class="p">:</span> <span class="n">l</span>
<span class="p">[</span><span class="s">'nom'</span><span class="p">,</span><span class="s">'prenom'</span><span class="p">,</span><span class="mi">35</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="bp">True</span><span class="p">]</span>
<span class="n">python</span><span class="p">:</span> <span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="s">'nom'</span>
<span class="n">python</span><span class="p">:</span> <span class="n">l</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>
<span class="bp">True</span>
<span class="n">python</span><span class="p">:</span> <span class="n">l</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span>
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="s">"&lt;stdin&gt;"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<span class="nb">IndexError</span><span class="p">:</span> <span class="nb">list</span> <span class="n">index</span> <span class="n">out</span> <span class="n">of</span> <span class="nb">range</span>
</code></pre></div></div>

<p>Les indices n√©gatifs acc√®dent aux √©l√©ments √† partir du
dernier :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python</span><span class="p">:</span> <span class="n">l</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="bp">True</span>
<span class="n">python</span><span class="p">:</span> <span class="n">l</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span>
<span class="s">'prenom'</span>
<span class="n">python</span><span class="p">:</span> <span class="n">l</span><span class="p">[</span><span class="o">-</span><span class="mi">6</span><span class="p">]</span>
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="s">"&lt;stdin&gt;"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<span class="nb">IndexError</span><span class="p">:</span> <span class="nb">list</span> <span class="n">index</span> <span class="n">out</span> <span class="n">of</span> <span class="nb">range</span>
</code></pre></div></div>

<p>Il est aussi possible d‚Äôobtenir les sous-listes d‚Äôune liste. On parle de
<code class="language-plaintext highlighter-rouge">slicing</code>. L‚Äôexpression <code class="language-plaintext highlighter-rouge">l[start:end:step]</code> donne la sous-liste de <code class="language-plaintext highlighter-rouge">l</code>
qui d√©marre √† l‚Äô√©l√©ment <code class="language-plaintext highlighter-rouge">start</code> (inclus), se termine √† l‚Äô√©l√©ment <code class="language-plaintext highlighter-rouge">end</code>
(exclus) et saute tous les <code class="language-plaintext highlighter-rouge">step</code> √©l√©ments.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python</span><span class="p">:</span> <span class="n">l</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="n">python</span><span class="p">:</span> <span class="n">l</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
<span class="n">python</span><span class="p">:</span> <span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">4</span><span class="p">]</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="n">python</span><span class="p">:</span> <span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">4</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
<span class="n">python</span><span class="p">:</span> <span class="n">l</span><span class="p">[</span><span class="mi">2</span><span class="p">:]</span>
<span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
<span class="n">python</span><span class="p">:</span> <span class="n">l</span><span class="p">[:</span><span class="o">-</span><span class="mi">3</span><span class="p">]</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="n">python</span><span class="p">:</span> <span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">::</span><span class="mi">3</span><span class="p">]</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
<span class="n">python</span><span class="p">:</span> <span class="n">l</span><span class="p">[</span><span class="mi">4</span><span class="p">:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
<span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
<span class="n">python</span><span class="p">:</span> <span class="n">l</span><span class="p">[::]</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
<span class="n">python</span><span class="p">:</span> <span class="n">l</span><span class="p">[:]</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>

</code></pre></div></div>

<p>La syntaxe <code class="language-plaintext highlighter-rouge">[:]</code> est un raccourci courant pour <em>copier</em> une liste :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python</span><span class="p">:</span> <span class="n">l</span><span class="p">[:]</span> <span class="o">==</span> <span class="n">l</span>
<span class="bp">True</span>
<span class="n">python</span><span class="p">:</span> <span class="n">l</span><span class="p">[:]</span> <span class="ow">is</span> <span class="n">l</span>
<span class="bp">False</span>
</code></pre></div></div>

<h3 id="compr√©hensions">Compr√©hensions</h3>

<p>Python offre une syntaxe pour la cr√©ation des listes qui devrait √™tre
famili√®re aux math√©maticiens. C‚Äôest l‚Äô√©criture en <code class="language-plaintext highlighter-rouge">compr√©hension</code> bien connue
dans la th√©orie des ensembles. Elle permet entre autre, de r√©duire l‚Äô√©criture
de loupes. C‚Äôest un h√©ritage du langage Lisp appel√©
<em>compr√©hensions de listes</em> :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python</span><span class="p">:</span> <span class="p">[</span><span class="n">a</span> <span class="o">+</span> <span class="mf">0.5</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)]</span>
<span class="p">[</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="mf">2.5</span><span class="p">,</span> <span class="mf">3.5</span><span class="p">,</span> <span class="mf">4.5</span><span class="p">,</span> <span class="mf">5.5</span><span class="p">,</span> <span class="mf">6.5</span><span class="p">,</span> <span class="mf">7.5</span><span class="p">,</span> <span class="mf">8.5</span><span class="p">,</span> <span class="mf">9.5</span><span class="p">]</span>
</code></pre></div></div>

<p>ce qui est s√©mantiquement √©quivalent √†</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">l</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
    <span class="n">l</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">)</span>
</code></pre></div></div>

<p>On peut ajouter un nombre arbitraire de <code class="language-plaintext highlighter-rouge">for</code> et de <code class="language-plaintext highlighter-rouge">if</code> (sans <code class="language-plaintext highlighter-rouge">else</code>)/ op√©rations
logiques dans une compr√©hension, ils seront d√©roul√©s dans l‚Äôordre :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">x</span><span class="o">*</span><span class="n">y</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

<p>(les retours √† la ligne sont optionnels) est √©quivalent √†</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">l</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">l</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="fonctions">Fonctions</h2>

<p>Source : <a href="https://docs.python.org/3/tutorial/controlflow.html">https://docs.python.org/3/tutorial/controlflow.html</a></p>

<p>Les fonctions Python sont d√©finies par le mot clef <code class="language-plaintext highlighter-rouge">def</code>. Elles
peuvent prendre un nombre arbitraire de param√®tres, et renvoyent une
valeur √† l‚Äôaide du mot clef <code class="language-plaintext highlighter-rouge">return</code>. Toute fonction renvoye une
valeur, les fonctions qui n‚Äôont pas de <code class="language-plaintext highlighter-rouge">return</code> renvoient la valeur
sp√©ciale <code class="language-plaintext highlighter-rouge">None</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">max</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">x</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">y</span>
</code></pre></div></div>

<p>Certains param√®tres peuvent prendre des valeurs par d√©faut. Si un
param√®tre prend une valeur par d√©faut, tous ceux qui le suivent
doivent aussi en prendre.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python</span><span class="p">:</span> <span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">d</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
<span class="p">.......</span>    <span class="k">return</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span>

<span class="n">python</span><span class="p">:</span> <span class="n">test</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
<span class="n">python</span><span class="p">:</span> <span class="n">test</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
<span class="n">python</span><span class="p">:</span> <span class="n">test</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="n">python</span><span class="p">:</span> <span class="n">test</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="s">"&lt;stdin&gt;"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<span class="nb">TypeError</span><span class="p">:</span> <span class="n">test</span><span class="p">()</span> <span class="n">takes</span> <span class="n">at</span> <span class="n">least</span> <span class="mi">2</span> <span class="n">arguments</span> <span class="p">(</span><span class="mi">1</span> <span class="n">given</span><span class="p">)</span>
</code></pre></div></div>

<p>Les param√®tres d‚Äôune fonction peuvent √™tre assign√©s hors ordre avec la
notation <code class="language-plaintext highlighter-rouge">param√®tre=valeur</code> :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python</span><span class="p">:</span> <span class="n">test</span><span class="p">(</span><span class="n">b</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">a</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
<span class="n">python</span><span class="p">:</span> <span class="n">test</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">d</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
<span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</code></pre></div></div>

<p>Python fournit deux op√©rateurs unaires pour transformer des objets en
param√®tres d‚Äôune fonction. L‚Äôop√©rateur <code class="language-plaintext highlighter-rouge">*</code> transforme une liste ou un
tuple, tandis que l‚Äôop√©rateur <code class="language-plaintext highlighter-rouge">**</code> transforme un dictionnaire :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python</span><span class="p">:</span> <span class="n">l</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="n">python</span><span class="p">:</span> <span class="n">test</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">)</span>
<span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">python</span><span class="p">:</span> <span class="n">d</span> <span class="o">=</span> <span class="p">{</span> <span class="s">'a'</span> <span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s">'b'</span> <span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s">'d'</span> <span class="p">:</span> <span class="mi">1</span> <span class="p">}</span>
<span class="n">python</span><span class="p">:</span> <span class="n">test</span><span class="p">(</span><span class="o">**</span><span class="n">d</span><span class="p">)</span>
<span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="python-un-survol-rapide"><a href="http://www.larsen-b.com/static/intro_python/">Python: un survol rapide</a></h2>

<p><a href="./">Retour</a></p>
:ET