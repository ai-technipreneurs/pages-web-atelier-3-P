I"Zq<p><a href="../Contenu.html">Contenu</a> | <a href="01_Python.html">Previous (1.1 Python)</a> | <a href="03_Numbers.html">Next (1.3 Numbers)</a></p>

<h1 id="12-a-first-program">1.2 A First Program</h1>

<p>This section discusses the creation of your first program, running the
interpreter, and some basic debugging.</p>

<h3 id="running-python">Running Python</h3>

<p>Python programs always run inside an interpreter.</p>

<p>The interpreter is a “console-based” application that normally runs
from a command shell.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3
Python 3.6.1 <span class="o">(</span>v3.6.1:69c0db5050, Mar 21 2017, 01:21:04<span class="o">)</span>
<span class="o">[</span>GCC 4.2.1 <span class="o">(</span>Apple Inc. build 5666<span class="o">)</span> <span class="o">(</span>dot 3<span class="o">)]</span> on darwin
Type <span class="s2">"help"</span>, <span class="s2">"copyright"</span>, <span class="s2">"credits"</span> or <span class="s2">"license"</span> <span class="k">for </span>more information.
<span class="o">&gt;&gt;&gt;</span>
</code></pre></div></div>

<p>Expert programmers usually have no problem using the interpreter in
this way, but it’s not so user-friendly for beginners.  You may be using
an environment that provides a different interface to Python.  That’s fine,
but learning how to run Python terminal is still a useful skill to know.</p>

<h3 id="interactive-mode">Interactive Mode</h3>

<p>When you start Python, you get an <em>interactive</em> mode where you can experiment.</p>

<p>If you start typing statements, they will run immediately. There is no
edit/compile/run/debug cycle.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="s">'hello world'</span><span class="p">)</span>
<span class="n">hello</span> <span class="n">world</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">37</span><span class="o">*</span><span class="mi">42</span>
<span class="mi">1554</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
<span class="p">...</span>     <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
<span class="p">...</span>
<span class="mi">0</span>
<span class="mi">1</span>
<span class="mi">2</span>
<span class="mi">3</span>
<span class="mi">4</span>
<span class="o">&gt;&gt;&gt;</span>
</code></pre></div></div>

<p>This so-called <em>read-eval-print-loop</em> (or REPL) is very useful for debugging and exploration.</p>

<p><strong>STOP</strong>: If you can’t figure out how to interact with Python, stop what you’re doing
and figure out how to do it.  If you’re using an IDE, it might be hidden behind a
menu option or other window.  Many parts of this course assume that you can
interact with the interpreter.</p>

<p>Let’s take a closer look at the elements of the REPL:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&gt;&gt;&gt;</code> is the interpreter prompt for starting a new statement.</li>
  <li><code class="language-plaintext highlighter-rouge">...</code> is the interpreter prompt for continuing a statement. Enter a blank line to finish typing and run what you’ve entered.</li>
</ul>

<p>The <code class="language-plaintext highlighter-rouge">...</code> prompt may or may not be shown depending on your environment. For this course,
it is shown as blanks to make it easier to cut/paste code samples.</p>

<p>The underscore <code class="language-plaintext highlighter-rouge">_</code> holds the last result.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="mi">37</span> <span class="o">*</span> <span class="mi">42</span>
<span class="mi">1554</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">_</span> <span class="o">*</span> <span class="mi">2</span>
<span class="mi">3108</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">_</span> <span class="o">+</span> <span class="mi">50</span>
<span class="mi">3158</span>
<span class="o">&gt;&gt;&gt;</span>
</code></pre></div></div>

<p><em>This is only true in the interactive mode.</em> You never use <code class="language-plaintext highlighter-rouge">_</code> in a program.</p>

<h3 id="creating-programs">Creating programs</h3>

<p>Programs are put in <code class="language-plaintext highlighter-rouge">.py</code> files.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># hello.py
</span><span class="k">print</span><span class="p">(</span><span class="s">'hello world'</span><span class="p">)</span>
</code></pre></div></div>

<p>You can create these files with your favorite text editor.</p>

<h3 id="running-programs">Running Programs</h3>

<p>To execute a program, run it in the terminal with the <code class="language-plaintext highlighter-rouge">python</code> command.
For example, in command-line Unix:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash % python hello.py
hello world
bash %
</code></pre></div></div>

<p>Or from the Windows shell:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\SomeFolder&gt;hello.py
hello world

C:\SomeFolder&gt;c:\python36\python hello.py
hello world
</code></pre></div></div>

<p>Note: On Windows, you may need to specify a full path to the Python interpreter such as <code class="language-plaintext highlighter-rouge">c:\python36\python</code>.
However, if Python is installed in its usual way, you might be able to just type the name of the program
such as <code class="language-plaintext highlighter-rouge">hello.py</code>.</p>

<h3 id="a-sample-program">A Sample Program</h3>

<p>Let’s solve the following problem:</p>

<blockquote>
  <p>One morning, you go out and place a dollar bill on the sidewalk by the Sears tower in Chicago.
Each day thereafter, you go out double the number of bills.
How long does it take for the stack of bills to exceed the height of the tower?</p>
</blockquote>

<p>Here’s a solution:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># sears.py
</span><span class="n">bill_thickness</span> <span class="o">=</span> <span class="mf">0.11</span> <span class="o">*</span> <span class="mf">0.001</span> <span class="c1"># Meters (0.11 mm)
</span><span class="n">sears_height</span> <span class="o">=</span> <span class="mi">442</span> <span class="c1"># Height (meters)
</span><span class="n">num_bills</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">day</span> <span class="o">=</span> <span class="mi">1</span>

<span class="k">while</span> <span class="n">num_bills</span> <span class="o">*</span> <span class="n">bill_thickness</span> <span class="o">&lt;</span> <span class="n">sears_height</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">day</span><span class="p">,</span> <span class="n">num_bills</span><span class="p">,</span> <span class="n">num_bills</span> <span class="o">*</span> <span class="n">bill_thickness</span><span class="p">)</span>
    <span class="n">day</span> <span class="o">=</span> <span class="n">day</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="n">num_bills</span> <span class="o">=</span> <span class="n">num_bills</span> <span class="o">*</span> <span class="mi">2</span>

<span class="k">print</span><span class="p">(</span><span class="s">'Number of days'</span><span class="p">,</span> <span class="n">day</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Number of bills'</span><span class="p">,</span> <span class="n">num_bills</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Final height'</span><span class="p">,</span> <span class="n">num_bills</span> <span class="o">*</span> <span class="n">bill_thickness</span><span class="p">)</span>
</code></pre></div></div>

<p>When you run it, you get the following output:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash % python3 sears.py
1 1 0.00011
2 2 0.00022
3 4 0.00044
4 8 0.00088
5 16 0.00176
6 32 0.00352
...
21 1048576 115.34336
22 2097152 230.68672
Number of days 23 
Number of bills 4194304 
Final height 461.37344
</code></pre></div></div>

<p>Using this program as a guide, you can learn a number of important core concepts about Python.</p>

<h3 id="statements">Statements</h3>

<p>A python program is a sequence of statements:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">4</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="o">*</span> <span class="mi">2</span>
<span class="k">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</code></pre></div></div>

<p>Each statement is terminated by a newline. Statements are executed one after the other until control reaches the end of the file.</p>

<h3 id="comments">Comments</h3>

<p>Comments are text that will not be executed.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">4</span>
<span class="c1"># This is a comment
</span><span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="o">*</span> <span class="mi">2</span>
<span class="k">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</code></pre></div></div>

<p>Comments are denoted by <code class="language-plaintext highlighter-rouge">#</code> and extend to the end of the line.</p>

<h3 id="variables">Variables</h3>

<p>A variable is a name for a value. You can use letters (lower and
upper-case) from a to z. As well as the character underscore <code class="language-plaintext highlighter-rouge">_</code>.
Numbers can also be part of the name of a variable, except as the
first character.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">height</span> <span class="o">=</span> <span class="mi">442</span> <span class="c1"># valid
</span><span class="n">_height</span> <span class="o">=</span> <span class="mi">442</span> <span class="c1"># valid
</span><span class="n">height2</span> <span class="o">=</span> <span class="mi">442</span> <span class="c1"># valid
</span><span class="mi">2</span><span class="n">height</span> <span class="o">=</span> <span class="mi">442</span> <span class="c1"># invalid
</span></code></pre></div></div>

<h3 id="types">Types</h3>

<p>Variables do not need to be declared with the type of the value.  The type
is associated with the value on the right hand side, not name of the variable.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">height</span> <span class="o">=</span> <span class="mi">442</span>           <span class="c1"># An integer
</span><span class="n">height</span> <span class="o">=</span> <span class="mf">442.0</span>         <span class="c1"># Floating point
</span><span class="n">height</span> <span class="o">=</span> <span class="s">'Really tall'</span> <span class="c1"># A string
</span></code></pre></div></div>

<p>Python is dynamically typed. The perceived “type” of a variable might change
as a program executes depending on the current value assigned to it.</p>

<h3 id="case-sensitivity">Case Sensitivity</h3>

<p>Python is case sensitive. Upper and lower-case letters are considered different letters.
These are all different variables:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">name</span> <span class="o">=</span> <span class="s">'Jake'</span>
<span class="n">Name</span> <span class="o">=</span> <span class="s">'Elwood'</span>
<span class="n">NAME</span> <span class="o">=</span> <span class="s">'Guido'</span>
</code></pre></div></div>

<p>Language statements are always lower-case.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>   <span class="c1"># OK
</span><span class="n">WHILE</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>   <span class="c1"># ERROR
</span></code></pre></div></div>

<h3 id="looping">Looping</h3>

<p>The <code class="language-plaintext highlighter-rouge">while</code> statement executes a loop.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="n">num_bills</span> <span class="o">*</span> <span class="n">bill_thickness</span> <span class="o">&lt;</span> <span class="n">sears_height</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">day</span><span class="p">,</span> <span class="n">num_bills</span><span class="p">,</span> <span class="n">num_bills</span> <span class="o">*</span> <span class="n">bill_thickness</span><span class="p">)</span>
    <span class="n">day</span> <span class="o">=</span> <span class="n">day</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="n">num_bills</span> <span class="o">=</span> <span class="n">num_bills</span> <span class="o">*</span> <span class="mi">2</span>

<span class="k">print</span><span class="p">(</span><span class="s">'Number of days'</span><span class="p">,</span> <span class="n">day</span><span class="p">)</span>
</code></pre></div></div>

<p>The statements indented below the <code class="language-plaintext highlighter-rouge">while</code> will execute as long as the expression after the <code class="language-plaintext highlighter-rouge">while</code> is <code class="language-plaintext highlighter-rouge">true</code>.</p>

<h3 id="indentation">Indentation</h3>

<p>Indentation is used to denote groups of statements that go together.
Consider the previous example:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="n">num_bills</span> <span class="o">*</span> <span class="n">bill_thickness</span> <span class="o">&lt;</span> <span class="n">sears_height</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">day</span><span class="p">,</span> <span class="n">num_bills</span><span class="p">,</span> <span class="n">num_bills</span> <span class="o">*</span> <span class="n">bill_thickness</span><span class="p">)</span>
    <span class="n">day</span> <span class="o">=</span> <span class="n">day</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="n">num_bills</span> <span class="o">=</span> <span class="n">num_bills</span> <span class="o">*</span> <span class="mi">2</span>

<span class="k">print</span><span class="p">(</span><span class="s">'Number of days'</span><span class="p">,</span> <span class="n">day</span><span class="p">)</span>
</code></pre></div></div>

<p>Indentation groups the following statements together as the operations that repeat:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">print</span><span class="p">(</span><span class="n">day</span><span class="p">,</span> <span class="n">num_bills</span><span class="p">,</span> <span class="n">num_bills</span> <span class="o">*</span> <span class="n">bill_thickness</span><span class="p">)</span>
    <span class="n">day</span> <span class="o">=</span> <span class="n">day</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="n">num_bills</span> <span class="o">=</span> <span class="n">num_bills</span> <span class="o">*</span> <span class="mi">2</span>
</code></pre></div></div>

<p>Because the <code class="language-plaintext highlighter-rouge">print()</code> statement at the end is not indented, it
does not belong to the loop. The empty line is just for
readability. It does not affect the execution.</p>

<h3 id="indentation-best-practices">Indentation best practices</h3>

<ul>
  <li>Use spaces instead of tabs.</li>
  <li>Use 4 spaces per level.</li>
  <li>Use a Python-aware editor.</li>
</ul>

<p>Python’s only requirement is that indentation within the same block
be consistent.   For example, this is an error:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="n">num_bills</span> <span class="o">*</span> <span class="n">bill_thickness</span> <span class="o">&lt;</span> <span class="n">sears_height</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">day</span><span class="p">,</span> <span class="n">num_bills</span><span class="p">,</span> <span class="n">num_bills</span> <span class="o">*</span> <span class="n">bill_thickness</span><span class="p">)</span>
        <span class="n">day</span> <span class="o">=</span> <span class="n">day</span> <span class="o">+</span> <span class="mi">1</span> <span class="c1"># ERROR
</span>    <span class="n">num_bills</span> <span class="o">=</span> <span class="n">num_bills</span> <span class="o">*</span> <span class="mi">2</span>
</code></pre></div></div>

<h3 id="conditionals">Conditionals</h3>

<p>The <code class="language-plaintext highlighter-rouge">if</code> statement is used to execute a conditional:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Computer says no'</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Computer says yes'</span><span class="p">)</span>
</code></pre></div></div>

<p>You can check for multiple conditions by adding extra checks using <code class="language-plaintext highlighter-rouge">elif</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Computer says no'</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Computer says yes'</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Computer says maybe'</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="printing">Printing</h3>

<p>The <code class="language-plaintext highlighter-rouge">print</code> function produces a single line of text with the values passed.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">'Hello world!'</span><span class="p">)</span> <span class="c1"># Prints the text 'Hello world!'
</span></code></pre></div></div>

<p>You can use variables. The text printed will be the value of the variable, not the name.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="mi">100</span>
<span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="c1"># Prints the text '100'
</span></code></pre></div></div>

<p>If you pass more than one value to <code class="language-plaintext highlighter-rouge">print</code> they are separated by spaces.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">name</span> <span class="o">=</span> <span class="s">'Jake'</span>
<span class="k">print</span><span class="p">(</span><span class="s">'My name is'</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="c1"># Print the text 'My name is Jake'
</span></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">print()</code> always puts a newline at the end.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">'Hello'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'My name is'</span><span class="p">,</span> <span class="s">'Jake'</span><span class="p">)</span>
</code></pre></div></div>

<p>This prints:</p>

<pre><code class="language-code">Hello
My name is Jake
</code></pre>

<p>The extra newline can be suppressed:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">'Hello'</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">' '</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'My name is'</span><span class="p">,</span> <span class="s">'Jake'</span><span class="p">)</span>
</code></pre></div></div>

<p>This code will now print:</p>

<pre><code class="language-code">Hello My name is Jake
</code></pre>

<h3 id="user-input">User input</h3>

<p>To read a line of typed user input, use the <code class="language-plaintext highlighter-rouge">input()</code> function:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">'Enter your name:'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Your name is'</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">input</code> prints a prompt to the user and returns their response.
This is useful for small programs, learning exercises or simple debugging.
It is not widely used for real programs.</p>

<h3 id="pass-statement">pass statement</h3>

<p>Sometimes you need to specify an empty code block. The keyword <code class="language-plaintext highlighter-rouge">pass</code> is used for it.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">:</span>
    <span class="k">pass</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Computer says false'</span><span class="p">)</span>
</code></pre></div></div>

<p>This is also called a “no-op” statement. It does nothing. It serves as a placeholder for statements, possibly to be added later.</p>

<h2 id="exercises">Exercises</h2>

<p>This is the first set of exercises where you need to create Python
files and run them.  From this point forward, it is assumed that you
are editing files in the <code class="language-plaintext highlighter-rouge">practical-python/Work/</code> directory.  To help
you locate the proper place, a number of empty starter files have
been created with the appropriate filenames.  Look for the file
<code class="language-plaintext highlighter-rouge">Work/bounce.py</code> that’s used in the first exercise.</p>

<h3 id="exercise-15-the-bouncing-ball">Exercise 1.5: The Bouncing Ball</h3>

<p>A rubber ball is dropped from a height of 100 meters and each time it
hits the ground, it bounces back up to 3/5 the height it fell.  Write
a program <code class="language-plaintext highlighter-rouge">bounce.py</code> that prints a table showing the height of the
first 10 bounces.</p>

<p>Your program should make a table that looks something like this:</p>

<pre><code class="language-code">1 60.0
2 36.0
3 21.599999999999998
4 12.959999999999999
5 7.775999999999999
6 4.6655999999999995
7 2.7993599999999996
8 1.6796159999999998
9 1.0077695999999998
10 0.6046617599999998
</code></pre>

<p><em>Note: You can clean up the output a bit if you use the round() function. Try using it to round the output to 4 digits.</em></p>

<pre><code class="language-code">1 60.0
2 36.0
3 21.6
4 12.96
5 7.776
6 4.6656
7 2.7994
8 1.6796
9 1.0078
10 0.6047
</code></pre>

<h3 id="exercise-16-debugging">Exercise 1.6: Debugging</h3>

<p>The following code fragment contains code from the Sears tower problem.  It also has a bug in it.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># sears.py
</span>
<span class="n">bill_thickness</span> <span class="o">=</span> <span class="mf">0.11</span> <span class="o">*</span> <span class="mf">0.001</span>    <span class="c1"># Meters (0.11 mm)
</span><span class="n">sears_height</span>   <span class="o">=</span> <span class="mi">442</span>             <span class="c1"># Height (meters)
</span><span class="n">num_bills</span>      <span class="o">=</span> <span class="mi">1</span>
<span class="n">day</span>            <span class="o">=</span> <span class="mi">1</span>

<span class="k">while</span> <span class="n">num_bills</span> <span class="o">*</span> <span class="n">bill_thickness</span> <span class="o">&lt;</span> <span class="n">sears_height</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">day</span><span class="p">,</span> <span class="n">num_bills</span><span class="p">,</span> <span class="n">num_bills</span> <span class="o">*</span> <span class="n">bill_thickness</span><span class="p">)</span>
    <span class="n">day</span> <span class="o">=</span> <span class="n">days</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="n">num_bills</span> <span class="o">=</span> <span class="n">num_bills</span> <span class="o">*</span> <span class="mi">2</span>

<span class="k">print</span><span class="p">(</span><span class="s">'Number of days'</span><span class="p">,</span> <span class="n">day</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Number of bills'</span><span class="p">,</span> <span class="n">num_bills</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Final height'</span><span class="p">,</span> <span class="n">num_bills</span> <span class="o">*</span> <span class="n">bill_thickness</span><span class="p">)</span>
</code></pre></div></div>

<p>Copy and paste the code that appears above in a new program called <code class="language-plaintext highlighter-rouge">sears.py</code>.
When you run the code you will get an error message that causes the
program to crash like this:</p>

<pre><code class="language-code">Traceback (most recent call last):
  File "sears.py", line 10, in &lt;module&gt;
    day = days + 1
NameError: name 'days' is not defined
</code></pre>

<p>Reading error messages is an important part of Python code. If your program
crashes, the very last line of the traceback message is the actual reason why the
the program crashed. Above that, you should see a fragment of source code and then
an identifying filename and line number.</p>

<ul>
  <li>Which line is the error?</li>
  <li>What is the error?</li>
  <li>Fix the error</li>
  <li>Run the program successfully</li>
</ul>

<p><a href="../Contenu.html">Contenu</a> | <a href="01_Python.html">Previous (1.1 Python)</a> | <a href="03_Numbers.html">Next (1.3 Numbers)</a></p>
:ET